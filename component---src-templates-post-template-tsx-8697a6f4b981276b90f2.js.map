{"version":3,"file":"component---src-templates-post-template-tsx-8697a6f4b981276b90f2.js","mappings":"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","sources":["webpack://blog/./src/components/PostDetail/NextAndPreviousPostLinks.tsx","webpack://blog/./src/components/PostDetail/PostBody.tsx","webpack://blog/./src/components/PostDetail/PostComment.tsx","webpack://blog/./src/components/PostDetail/PostHeader.tsx","webpack://blog/./src/components/PostDetail/TableOfContents.tsx","webpack://blog/./src/templates/PostTemplate.tsx"],"sourcesContent":["import styled from '@emotion/styled';\nimport { Link } from 'gatsby';\nimport { IoIosArrowBack, IoIosArrowForward } from 'react-icons/io';\nimport COLORS from 'utils/constants/colors';\n\ntype Props = {\n  previousPost?: {\n    title: string;\n    slug: string;\n  };\n  nextPost?: {\n    title: string;\n    slug: string;\n  };\n};\n\nconst NextAndPreviousPostLinks = ({ previousPost, nextPost }: Props) => {\n  return (\n    <Container>\n      <PreviousContainer>\n        {previousPost && (\n          <StyledLink to={previousPost.slug}>\n            <IoIosArrowBack size={20} />\n            <TextContainer>\n              <span style={{ fontSize: '12px', color: COLORS.GRAY_BOLD }}>\n                Previous\n              </span>\n              <div>{previousPost.title}</div>\n            </TextContainer>\n          </StyledLink>\n        )}\n      </PreviousContainer>\n      <NextContainer>\n        {nextPost && (\n          <StyledLink to={nextPost.slug}>\n            <TextContainer>\n              <span style={{ fontSize: '12px', color: COLORS.GRAY_BOLD }}>\n                Next\n              </span>\n              <div>{nextPost.title}</div>\n            </TextContainer>\n            <IoIosArrowForward size={20} />\n          </StyledLink>\n        )}\n      </NextContainer>\n    </Container>\n  );\n};\n\nexport default NextAndPreviousPostLinks;\n\nconst Container = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  margin: 4rem 0;\n`;\n\nconst LinkContainer = styled.div`\n  flex: 1;\n`;\n\nconst PreviousContainer = styled(LinkContainer)`\n  text-align: start;\n`;\n\nconst NextContainer = styled(LinkContainer)`\n  display: flex;\n  flex-direction: row-reverse;\n  align-items: center;\n  text-align: end;\n`;\n\nconst StyledLink = styled(Link)`\n  display: flex;\n  gap: 0.5rem;\n  align-items: center;\n`;\n\nconst TextContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 0.5rem;\n`;\n","import styled from '@emotion/styled';\nimport { ForwardedRef, forwardRef } from 'react';\nimport COLORS from 'utils/constants/colors';\n\nconst PostBody = forwardRef(\n  ({ html }: { html: string }, ref: ForwardedRef<HTMLDivElement>) => {\n    return (\n      <MarkdownRenderer ref={ref} dangerouslySetInnerHTML={{ __html: html }} />\n    );\n  },\n);\n\nexport default PostBody;\n\nconst MarkdownRenderer = styled.div`\n  /* Renderer Style */\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  margin: 0 auto;\n  padding: 5rem 0;\n\n  /* Markdown Style */\n  line-height: 1.75;\n  word-break: break-all;\n\n  /* Adjust Heading Element Style */\n  h1,\n  h2,\n  h3 {\n    margin-bottom: 1.5rem;\n    font-weight: 700;\n  }\n\n  h1 {\n    padding-left: 0.2rem;\n    font-size: 2rem;\n    border-bottom: 1px solid ${COLORS.GRAY};\n  }\n\n  h2 {\n    font-size: 1.75rem;\n    border-bottom: 1px solid ${COLORS.GRAY};\n  }\n\n  h3 {\n    font-size: 1.25rem;\n  }\n\n  * + h1,\n  * + h2,\n  * + h3 {\n    margin-top: 2rem;\n    margin-bottom: 0.5rem;\n  }\n\n  hr + h1,\n  hr + h2,\n  hr + h3 {\n    margin-top: 0;\n  }\n\n  /* Adjust Quotation Element Style */\n  blockquote {\n    margin: 30px 0;\n    padding: 0 1rem;\n    color: ${COLORS.GRAY_BOLD};\n    font-weight: 800;\n    border-left: 2px solid ${COLORS.GRAY};\n  }\n\n  /* Adjust List Element Style */\n  ol,\n  ul {\n    margin-top: 0rem;\n    margin-bottom: 0rem;\n    margin-left: 1rem;\n    padding: 1rem 0;\n  }\n\n  li {\n    font-weight: 300;\n  }\n\n  /* Adjust Horizontal Rule style */\n  hr {\n    margin: 100px 0;\n    border: 1px solid #000;\n  }\n\n  /* Adjust Link Element Style */\n  a {\n    color: ${COLORS.SUB_BOLD};\n    /* text-decoration: underline; */\n  }\n\n  p {\n    margin: 0;\n    padding: 0.5rem 0;\n    font-weight: 300;\n  }\n\n  img {\n    margin: 3rem 0;\n  }\n\n  /* Code Block Highlighting */\n  pre[class*='language-'],\n  code[class*='language-'] {\n    color: #d4d4d4;\n    font-size: 13px;\n    font-family: Menlo, Monaco, Consolas, 'Andale Mono', 'Ubuntu Mono',\n      'Courier New', monospace;\n    direction: ltr;\n    white-space: pre;\n    text-align: left;\n    text-shadow: none;\n    word-break: normal;\n    word-spacing: normal;\n    tab-size: 4;\n    hyphens: none;\n  }\n\n  pre[class*='language-']::selection,\n  code[class*='language-']::selection,\n  pre[class*='language-'] *::selection,\n  code[class*='language-'] *::selection {\n    text-shadow: none;\n    background: #264f78;\n  }\n\n  @media print {\n    pre[class*='language-'],\n    code[class*='language-'] {\n      text-shadow: none;\n    }\n  }\n\n  pre[class*='language-'] {\n    padding: 1rem;\n    overflow: auto;\n    background: #1e1e1e;\n  }\n\n  :not(pre) > code[class*='language-'] {\n    padding: 0.1em 0.3em;\n    background: #1e1e1e;\n    border-radius: 0;\n    border-radius: 0.3em;\n  }\n  /****************0*****************************************\n* Tokens\n*/\n  .namespace {\n    opacity: 0.7;\n  }\n\n  .token.doctype .token.doctype-tag {\n    color: #569cd6;\n  }\n\n  .token.doctype .token.name {\n    color: #9cdcfe;\n  }\n\n  .token.comment,\n  .token.prolog {\n    color: #6a9955;\n  }\n\n  .token.punctuation,\n  .language-html .language-css .token.punctuation,\n  .language-html .language-javascript .token.punctuation {\n    color: #d4d4d4;\n  }\n\n  .token.property,\n  .token.tag,\n  .token.boolean,\n  .token.number,\n  .token.constant,\n  .token.symbol,\n  .token.inserted,\n  .token.unit {\n    color: #b5cea8;\n  }\n\n  .token.selector,\n  .token.attr-name,\n  .token.string,\n  .token.char,\n  .token.builtin,\n  .token.deleted {\n    color: #ce9178;\n  }\n\n  .language-css .token.string.url {\n    text-decoration: underline;\n  }\n\n  .token.operator,\n  .token.entity {\n    color: #d4d4d4;\n  }\n\n  .token.operator.arrow {\n    color: #569cd6;\n  }\n\n  .token.atrule {\n    color: #ce9178;\n  }\n\n  .token.atrule .token.rule {\n    color: #c586c0;\n  }\n\n  .token.atrule .token.url {\n    color: #9cdcfe;\n  }\n\n  .token.atrule .token.url .token.function {\n    color: #dcdcaa;\n  }\n\n  .token.atrule .token.url .token.punctuation {\n    color: #d4d4d4;\n  }\n\n  .token.keyword {\n    color: #569cd6;\n  }\n\n  .token.keyword.module,\n  .token.keyword.control-flow {\n    color: #c586c0;\n  }\n\n  .token.function,\n  .token.function .token.maybe-class-name {\n    color: #dcdcaa;\n  }\n\n  .token.regex {\n    color: #d16969;\n  }\n\n  .token.important {\n    color: #569cd6;\n  }\n\n  .token.italic {\n    font-style: italic;\n  }\n\n  .token.constant {\n    color: #9cdcfe;\n  }\n\n  .token.class-name,\n  .token.maybe-class-name {\n    color: #4ec9b0;\n  }\n\n  .token.console {\n    color: #9cdcfe;\n  }\n\n  .token.parameter {\n    color: #9cdcfe;\n  }\n\n  .token.interpolation {\n    color: #9cdcfe;\n  }\n\n  .token.punctuation.interpolation-punctuation {\n    color: #569cd6;\n  }\n\n  .token.boolean {\n    color: #569cd6;\n  }\n\n  .token.property,\n  .token.variable,\n  .token.imports .token.maybe-class-name,\n  .token.exports .token.maybe-class-name {\n    color: #9cdcfe;\n  }\n\n  .token.selector {\n    color: #d7ba7d;\n  }\n\n  .token.escape {\n    color: #d7ba7d;\n  }\n\n  .token.tag {\n    color: #569cd6;\n  }\n\n  .token.tag .token.punctuation {\n    color: #808080;\n  }\n\n  .token.cdata {\n    color: #808080;\n  }\n\n  .token.attr-name {\n    color: #9cdcfe;\n  }\n\n  .token.attr-value,\n  .token.attr-value .token.punctuation {\n    color: #ce9178;\n  }\n\n  .token.attr-value .token.punctuation.attr-equals {\n    color: #d4d4d4;\n  }\n\n  .token.entity {\n    color: #569cd6;\n  }\n\n  .token.namespace {\n    color: #4ec9b0;\n  }\n  /*********************************************************\n* Language Specific\n*/\n\n  pre[class*='language-javascript'],\n  code[class*='language-javascript'],\n  pre[class*='language-jsx'],\n  code[class*='language-jsx'],\n  pre[class*='language-typescript'],\n  code[class*='language-typescript'],\n  pre[class*='language-tsx'],\n  code[class*='language-tsx'] {\n    color: #9cdcfe;\n  }\n\n  pre[class*='language-css'],\n  code[class*='language-css'] {\n    color: #ce9178;\n  }\n\n  pre[class*='language-html'],\n  code[class*='language-html'] {\n    color: #d4d4d4;\n  }\n\n  .language-regex .token.anchor {\n    color: #dcdcaa;\n  }\n\n  .language-html .token.punctuation {\n    color: #808080;\n  }\n  /*********************************************************\n* Line highlighting\n*/\n  pre[class*='language-'] > code[class*='language-'] {\n    position: relative;\n    z-index: 1;\n  }\n\n  .line-highlight.line-highlight {\n    z-index: 0;\n    background: #f7ebc6;\n    box-shadow: inset 5px 0 0 #f7d87c;\n  }\n\n  pre[class*='language-text'],\n  code[class*='language-text'] {\n    padding: 0.25rem;\n    color: ${COLORS.BLACK};\n    background-color: ${COLORS.GRAY};\n    border-radius: 0.25rem;\n  }\n\n  @media (max-width: 768px) {\n    padding: 0 0.5rem;\n\n    img {\n      width: 100%;\n    }\n\n    pre[class*='language-'] {\n      width: 100%;\n      overflow-x: auto;\n    }\n  }\n`;\n","import { useEffect, useRef } from 'react';\n\nconst src = 'https://utteranc.es/client.js';\nconst repo = 'metacode22/metacode22.github.io';\n\ntype UtterancesAttributesType = {\n  src: string;\n  repo: string;\n  'issue-term': string;\n  label: string;\n  theme: string;\n  crossorigin: string;\n  async: string;\n};\n\nconst PostComment = () => {\n  const commentRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    if (!commentRef.current) return;\n\n    const utterances: HTMLScriptElement = document.createElement('script');\n\n    const attributes: UtterancesAttributesType = {\n      src,\n      repo,\n      // To Do\n      // pathname에서 title로 바꾸기\n      'issue-term': 'pathname',\n      label: 'Comment',\n      theme: 'github-light',\n      crossorigin: 'anonymous',\n      async: 'true',\n    };\n\n    Object.entries(attributes).forEach(([key, value]) => {\n      utterances.setAttribute(key, value);\n    });\n\n    commentRef.current.appendChild(utterances);\n  }, []);\n\n  return <div ref={commentRef} />;\n};\n\nexport default PostComment;\n","import styled from '@emotion/styled';\nimport CategoryListItem from 'components/Posts/CategoryListItem';\nimport { GatsbyImage, IGatsbyImageData } from 'gatsby-plugin-image';\nimport COLORS from 'utils/constants/colors';\n\ntype Props = {\n  title: string;\n  date: string;\n  categories: string[];\n  thumbnail: IGatsbyImageData;\n  timeToRead: number;\n};\n\n/**\n * To Do\n * 제목            |            조회수\n * 카테고리  |  time to read  |  날짜\n *\n * ViewCount 구현 할까 말까...\n */\nconst PostHeader = ({\n  title,\n  date,\n  categories,\n  thumbnail,\n  timeToRead,\n}: Props) => {\n  return (\n    <Container>\n      <Thumbnail image={thumbnail} alt='해당 포스트 썸네일 이미지' />\n      <div>\n        <Title>{title}</Title>\n        {/* <ViewCount></ViewCount> */}\n      </div>\n      <CategoriesCreatedAtContainer>\n        <CategoriesAndTimeToReadContainer>\n          {categories.map(category => (\n            <CategoryListItem category={category} key={category}>\n              {category}\n            </CategoryListItem>\n          ))}\n          <TimeToRead>약 {timeToRead}분</TimeToRead>\n        </CategoriesAndTimeToReadContainer>\n        <CreatedAt>{date}</CreatedAt>\n      </CategoriesCreatedAtContainer>\n    </Container>\n  );\n};\n\nexport default PostHeader;\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\n\nconst Thumbnail = styled(GatsbyImage)`\n  width: 100%;\n  max-width: 768px;\n  margin: 4rem auto;\n`;\n\nconst CategoriesCreatedAtContainer = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  color: ${COLORS.GRAY_BOLD};\n`;\n\nconst Title = styled.h1`\n  word-break: keep-all;\n`;\n\nconst CategoriesAndTimeToReadContainer = styled.div`\n  display: flex;\n  align-items: center;\n`;\n\nconst TimeToRead = styled.div`\n  margin-left: 1rem;\n`;\n\nconst CreatedAt = styled.div``;\n","import styled from '@emotion/styled';\nimport { ForwardedRef, forwardRef, useEffect } from 'react';\nimport COLORS from 'utils/constants/colors';\n\ntype Props = {\n  tableOfContents: string;\n};\n\nconst TableOfContents = forwardRef(\n  ({ tableOfContents }: Props, ref: ForwardedRef<HTMLDivElement>) => {\n    // To Do\n    // intersection observer 등을 활용해 해당 태그가 보이면 목차의 백그라운드 색깔도 바꾸기.\n    useEffect(() => {\n      if (typeof ref !== 'function') {\n        // console.log(ref?.current?.querySelectorAll('h1, h2, h3'));\n      }\n    }, []);\n\n    return (\n      <Container>\n        <TableOfContentsRenderer\n          dangerouslySetInnerHTML={{ __html: tableOfContents }}\n        />\n      </Container>\n    );\n  },\n);\n\nexport default TableOfContents;\n\nconst Container = styled.aside`\n  position: absolute;\n  top: 0;\n  left: 768px;\n  height: 100%;\n  padding-left: 4rem;\n\n  @media (max-width: 1400px) {\n    display: none;\n  }\n`;\n\nconst TableOfContentsRenderer = styled.nav`\n  position: sticky;\n  top: 6rem;\n  width: 240px;\n  overflow: hidden;\n  font-size: 0.8rem;\n\n  p {\n    margin: 0;\n  }\n\n  a {\n    display: block;\n    padding: 0.5rem;\n    overflow: hidden;\n    white-space: nowrap;\n    text-overflow: ellipsis;\n    border-radius: 4px;\n    transition: all 0.1s ease-out;\n\n    &:hover {\n      background-color: ${COLORS.SUB_MIDDLE_BOLD};\n    }\n  }\n\n  ul {\n    margin-left: 0.5rem;\n    padding: 0 0.5rem;\n    list-style: none;\n\n    border-left: 2px solid ${COLORS.GRAY};\n  }\n`;\n","import styled from '@emotion/styled';\nimport Layout from 'components/common/Layout';\nimport NextAndPreviousPostLinks from 'components/PostDetail/NextAndPreviousPostLinks';\nimport PostBody from 'components/PostDetail/PostBody';\nimport PostComment from 'components/PostDetail/PostComment';\nimport PostHeader from 'components/PostDetail/PostHeader';\nimport TableOfContents from 'components/PostDetail/TableOfContents';\nimport { graphql } from 'gatsby';\nimport { useRef } from 'react';\nimport { PostDetail } from 'types/Post';\n\ntype Props = {\n  data: {\n    allMarkdownRemark: {\n      edges: PostDetail[];\n    };\n  };\n  location: {\n    href: string;\n  };\n  pageContext: {\n    slug: string;\n    previousPost?: {\n      title: string;\n      slug: string;\n    };\n    nextPost?: {\n      title: string;\n      slug: string;\n    };\n  };\n};\n\nconst PostTemplate = ({\n  data: {\n    allMarkdownRemark: { edges },\n  },\n  location: { href },\n  pageContext: { previousPost, nextPost },\n}: Props) => {\n  const contentRef = useRef<HTMLDivElement>(null);\n  const {\n    node: {\n      tableOfContents,\n      timeToRead,\n      html,\n      frontmatter: {\n        title,\n        summary,\n        date,\n        categories,\n        thumbnail: {\n          childImageSharp: { gatsbyImageData },\n          publicURL,\n        },\n      },\n    },\n  } = edges[0];\n\n  return (\n    <Layout title={title} description={summary} url={href} image={publicURL}>\n      <Container>\n        <PostHeader\n          title={title}\n          date={date}\n          categories={categories}\n          thumbnail={gatsbyImageData}\n          timeToRead={timeToRead}\n        />\n        <PostBody ref={contentRef} html={html} />\n        <NextAndPreviousPostLinks\n          previousPost={previousPost}\n          nextPost={nextPost}\n        />\n        <PostComment />\n        <TableOfContents ref={contentRef} tableOfContents={tableOfContents} />\n      </Container>\n    </Layout>\n  );\n};\n\nexport default PostTemplate;\n\nexport const getMarkdownDataBySlug = graphql`\n  query getMarkdownDataBySlug($slug: String) {\n    allMarkdownRemark(filter: { fields: { slug: { eq: $slug } } }) {\n      edges {\n        node {\n          tableOfContents\n          timeToRead\n          html\n          frontmatter {\n            title\n            summary\n            date(formatString: \"YYYY-MM-DD\")\n            categories\n            thumbnail {\n              childImageSharp {\n                gatsbyImageData\n              }\n              publicURL\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\nconst Container = styled.div`\n  position: relative;\n  width: 100%;\n  max-width: 768px;\n  margin: 0 auto;\n`;\n"],"names":["_ref","previousPost","nextPost","_jsxs","Container","_jsx","PreviousContainer","StyledLink","to","slug","IoIosArrowBack","size","TextContainer","style","fontSize","color","COLORS","title","NextContainer","IoIosArrowForward","LinkContainer","_styled","Link","forwardRef","ref","html","MarkdownRenderer","dangerouslySetInnerHTML","__html","commentRef","useRef","useEffect","current","utterances","document","createElement","attributes","src","repo","label","theme","crossorigin","async","Object","entries","forEach","key","value","setAttribute","appendChild","date","categories","thumbnail","timeToRead","Thumbnail","image","alt","Title","CategoriesCreatedAtContainer","CategoriesAndTimeToReadContainer","map","category","CategoryListItem","TimeToRead","CreatedAt","GatsbyImage","tableOfContents","TableOfContentsRenderer","data","allMarkdownRemark","edges","location","href","pageContext","contentRef","node","frontmatter","summary","childImageSharp","gatsbyImageData","publicURL","Layout","description","url","children","PostHeader","PostBody","NextAndPreviousPostLinks","PostComment","TableOfContents","target","name","styles"],"sourceRoot":""}