{"version":3,"file":"component---src-templates-post-template-tsx-7cba2fd612eef3a8873f.js","mappings":"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","sources":["webpack://blog/./src/components/PostDetail/PostComment.tsx","webpack://blog/./src/components/PostDetail/PostContent.tsx","webpack://blog/./src/components/PostDetail/PostHead.tsx","webpack://blog/./src/components/PostDetail/TableOfContents.tsx","webpack://blog/./src/templates/PostTemplate.tsx"],"sourcesContent":["import { useEffect, useRef } from 'react';\n\nconst src = 'https://utteranc.es/client.js';\nconst repo = 'metacode22/metacode22.github.io';\n\ntype UtterancesAttributesType = {\n  src: string;\n  repo: string;\n  'issue-term': string;\n  label: string;\n  theme: string;\n  crossorigin: string;\n  async: string;\n};\n\nconst PostComment = () => {\n  const commentRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    if (!commentRef.current) return;\n\n    const utterances: HTMLScriptElement = document.createElement('script');\n\n    const attributes: UtterancesAttributesType = {\n      src,\n      repo,\n      // To Do\n      // pathname에서 title로 바꾸기\n      'issue-term': 'pathname',\n      label: 'Comment',\n      theme: 'github-light',\n      crossorigin: 'anonymous',\n      async: 'true',\n    };\n\n    Object.entries(attributes).forEach(([key, value]) => {\n      utterances.setAttribute(key, value);\n    });\n\n    commentRef.current.appendChild(utterances);\n  }, []);\n\n  return <div ref={commentRef} />;\n};\n\nexport default PostComment;\n","import styled from '@emotion/styled';\nimport { ForwardedRef, forwardRef } from 'react';\nimport COLORS from 'utils/constants/colors';\n\nconst PostContent = forwardRef(\n  ({ html }: { html: string }, ref: ForwardedRef<HTMLDivElement>) => {\n    return (\n      <MarkdownRenderer ref={ref} dangerouslySetInnerHTML={{ __html: html }} />\n    );\n  },\n);\n\nexport default PostContent;\n\nconst MarkdownRenderer = styled.div`\n  /* Renderer Style */\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  margin: 0 auto;\n  padding: 5rem 0;\n\n  /* Markdown Style */\n  line-height: 1.75;\n  word-break: break-all;\n\n  /* Adjust Heading Element Style */\n  h1,\n  h2,\n  h3 {\n    margin-bottom: 1.5rem;\n    font-weight: 700;\n  }\n\n  h1 {\n    padding-left: 0.2rem;\n    font-size: 2rem;\n    border-bottom: 1px solid ${COLORS.GRAY};\n  }\n\n  h2 {\n    font-size: 1.75rem;\n    border-bottom: 1px solid ${COLORS.GRAY};\n  }\n\n  h3 {\n    font-size: 1.5rem;\n  }\n\n  * + h1,\n  * + h2,\n  * + h3 {\n    margin-top: 1rem;\n    margin-bottom: 0.5rem;\n  }\n\n  hr + h1,\n  hr + h2,\n  hr + h3 {\n    margin-top: 0;\n  }\n\n  /* Adjust Quotation Element Style */\n  blockquote {\n    margin: 30px 0;\n    padding: 0 1rem;\n    color: ${COLORS.GRAY_BOLD};\n    font-weight: 800;\n    border-left: 2px solid ${COLORS.GRAY};\n  }\n\n  /* Adjust List Element Style */\n  ol,\n  ul {\n    margin-left: 1rem;\n    padding: 1rem 0;\n  }\n\n  li {\n    font-weight: 300;\n  }\n\n  /* Adjust Horizontal Rule style */\n  hr {\n    margin: 100px 0;\n    border: 1px solid #000;\n  }\n\n  /* Adjust Link Element Style */\n  a {\n    color: ${COLORS.SUB_BOLD};\n    /* text-decoration: underline; */\n  }\n\n  p {\n    margin: 0;\n    padding: 0.5rem 0;\n    font-weight: 300;\n  }\n\n  img {\n    margin: 3rem 0;\n  }\n\n  /* Code Block Highlighting */\n  pre[class*='language-'],\n  code[class*='language-'] {\n    color: #d4d4d4;\n    font-size: 13px;\n    font-family: Menlo, Monaco, Consolas, 'Andale Mono', 'Ubuntu Mono',\n      'Courier New', monospace;\n    direction: ltr;\n    white-space: pre;\n    text-align: left;\n    text-shadow: none;\n    word-break: normal;\n    word-spacing: normal;\n    tab-size: 4;\n    hyphens: none;\n  }\n\n  pre[class*='language-']::selection,\n  code[class*='language-']::selection,\n  pre[class*='language-'] *::selection,\n  code[class*='language-'] *::selection {\n    text-shadow: none;\n    background: #264f78;\n  }\n\n  @media print {\n    pre[class*='language-'],\n    code[class*='language-'] {\n      text-shadow: none;\n    }\n  }\n\n  pre[class*='language-'] {\n    padding: 1rem;\n    overflow: auto;\n    background: #1e1e1e;\n  }\n\n  :not(pre) > code[class*='language-'] {\n    padding: 0.1em 0.3em;\n    background: #1e1e1e;\n    border-radius: 0;\n    border-radius: 0.3em;\n  }\n  /****************0*****************************************\n* Tokens\n*/\n  .namespace {\n    opacity: 0.7;\n  }\n\n  .token.doctype .token.doctype-tag {\n    color: #569cd6;\n  }\n\n  .token.doctype .token.name {\n    color: #9cdcfe;\n  }\n\n  .token.comment,\n  .token.prolog {\n    color: #6a9955;\n  }\n\n  .token.punctuation,\n  .language-html .language-css .token.punctuation,\n  .language-html .language-javascript .token.punctuation {\n    color: #d4d4d4;\n  }\n\n  .token.property,\n  .token.tag,\n  .token.boolean,\n  .token.number,\n  .token.constant,\n  .token.symbol,\n  .token.inserted,\n  .token.unit {\n    color: #b5cea8;\n  }\n\n  .token.selector,\n  .token.attr-name,\n  .token.string,\n  .token.char,\n  .token.builtin,\n  .token.deleted {\n    color: #ce9178;\n  }\n\n  .language-css .token.string.url {\n    text-decoration: underline;\n  }\n\n  .token.operator,\n  .token.entity {\n    color: #d4d4d4;\n  }\n\n  .token.operator.arrow {\n    color: #569cd6;\n  }\n\n  .token.atrule {\n    color: #ce9178;\n  }\n\n  .token.atrule .token.rule {\n    color: #c586c0;\n  }\n\n  .token.atrule .token.url {\n    color: #9cdcfe;\n  }\n\n  .token.atrule .token.url .token.function {\n    color: #dcdcaa;\n  }\n\n  .token.atrule .token.url .token.punctuation {\n    color: #d4d4d4;\n  }\n\n  .token.keyword {\n    color: #569cd6;\n  }\n\n  .token.keyword.module,\n  .token.keyword.control-flow {\n    color: #c586c0;\n  }\n\n  .token.function,\n  .token.function .token.maybe-class-name {\n    color: #dcdcaa;\n  }\n\n  .token.regex {\n    color: #d16969;\n  }\n\n  .token.important {\n    color: #569cd6;\n  }\n\n  .token.italic {\n    font-style: italic;\n  }\n\n  .token.constant {\n    color: #9cdcfe;\n  }\n\n  .token.class-name,\n  .token.maybe-class-name {\n    color: #4ec9b0;\n  }\n\n  .token.console {\n    color: #9cdcfe;\n  }\n\n  .token.parameter {\n    color: #9cdcfe;\n  }\n\n  .token.interpolation {\n    color: #9cdcfe;\n  }\n\n  .token.punctuation.interpolation-punctuation {\n    color: #569cd6;\n  }\n\n  .token.boolean {\n    color: #569cd6;\n  }\n\n  .token.property,\n  .token.variable,\n  .token.imports .token.maybe-class-name,\n  .token.exports .token.maybe-class-name {\n    color: #9cdcfe;\n  }\n\n  .token.selector {\n    color: #d7ba7d;\n  }\n\n  .token.escape {\n    color: #d7ba7d;\n  }\n\n  .token.tag {\n    color: #569cd6;\n  }\n\n  .token.tag .token.punctuation {\n    color: #808080;\n  }\n\n  .token.cdata {\n    color: #808080;\n  }\n\n  .token.attr-name {\n    color: #9cdcfe;\n  }\n\n  .token.attr-value,\n  .token.attr-value .token.punctuation {\n    color: #ce9178;\n  }\n\n  .token.attr-value .token.punctuation.attr-equals {\n    color: #d4d4d4;\n  }\n\n  .token.entity {\n    color: #569cd6;\n  }\n\n  .token.namespace {\n    color: #4ec9b0;\n  }\n  /*********************************************************\n* Language Specific\n*/\n\n  pre[class*='language-javascript'],\n  code[class*='language-javascript'],\n  pre[class*='language-jsx'],\n  code[class*='language-jsx'],\n  pre[class*='language-typescript'],\n  code[class*='language-typescript'],\n  pre[class*='language-tsx'],\n  code[class*='language-tsx'] {\n    color: #9cdcfe;\n  }\n\n  pre[class*='language-css'],\n  code[class*='language-css'] {\n    color: #ce9178;\n  }\n\n  pre[class*='language-html'],\n  code[class*='language-html'] {\n    color: #d4d4d4;\n  }\n\n  .language-regex .token.anchor {\n    color: #dcdcaa;\n  }\n\n  .language-html .token.punctuation {\n    color: #808080;\n  }\n  /*********************************************************\n* Line highlighting\n*/\n  pre[class*='language-'] > code[class*='language-'] {\n    position: relative;\n    z-index: 1;\n  }\n\n  .line-highlight.line-highlight {\n    z-index: 0;\n    background: #f7ebc6;\n    box-shadow: inset 5px 0 0 #f7d87c;\n  }\n\n  pre[class*='language-text'],\n  code[class*='language-text'] {\n    padding: 0.25rem;\n    color: ${COLORS.BLACK};\n    background-color: ${COLORS.GRAY};\n    border-radius: 0.25rem;\n  }\n\n  @media (max-width: 768px) {\n    padding: 0 0.5rem;\n\n    img {\n      width: 100%;\n    }\n\n    pre[class*='language-'] {\n      width: 100%;\n      overflow-x: auto;\n    }\n  }\n`;\n","import styled from '@emotion/styled';\nimport CategoryListItem from 'components/Posts/CategoryListItem';\nimport { GatsbyImage, IGatsbyImageData } from 'gatsby-plugin-image';\nimport COLORS from 'utils/constants/colors';\n\ntype Props = {\n  title: string;\n  date: string;\n  categories: string[];\n  thumbnail: IGatsbyImageData;\n  timeToRead: number;\n};\n\n/**\n * To Do\n * 제목            |            조회수\n * 카테고리  |  time to read  |  날짜\n *\n * ViewCount 구현 할까 말까...\n */\nconst PostHead = ({\n  title,\n  date,\n  categories,\n  thumbnail,\n  timeToRead,\n}: Props) => {\n  return (\n    <Container>\n      <Thumbnail image={thumbnail} alt='해당 포스트 썸네일 이미지' />\n      <div>\n        <Title>{title}</Title>\n        {/* <ViewCount></ViewCount> */}\n      </div>\n      <CategoriesCreatedAtContainer>\n        <CategoriesAndTimeToReadContainer>\n          {categories.map(category => (\n            <CategoryListItem category={category} key={category}>\n              {category}\n            </CategoryListItem>\n          ))}\n          <TimeToRead>{timeToRead} min read</TimeToRead>\n        </CategoriesAndTimeToReadContainer>\n        <CreatedAt>{date}</CreatedAt>\n      </CategoriesCreatedAtContainer>\n    </Container>\n  );\n};\n\nexport default PostHead;\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\n\nconst Thumbnail = styled(GatsbyImage)`\n  width: 100%;\n  max-width: 768px;\n  margin: 4rem auto;\n`;\n\nconst CategoriesCreatedAtContainer = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  color: ${COLORS.GRAY_BOLD};\n`;\n\nconst Title = styled.h1`\n  word-break: keep-all;\n`;\n\nconst CategoriesAndTimeToReadContainer = styled.div`\n  display: flex;\n  align-items: center;\n`;\n\nconst TimeToRead = styled.div`\n  margin-left: 1rem;\n`;\n\nconst CreatedAt = styled.div``;\n","import styled from '@emotion/styled';\nimport { ForwardedRef, forwardRef, useEffect } from 'react';\nimport COLORS from 'utils/constants/colors';\n\ntype Props = {\n  tableOfContents: string;\n};\n\nconst TableOfContents = forwardRef(\n  ({ tableOfContents }: Props, ref: ForwardedRef<HTMLDivElement>) => {\n    // To Do\n    // intersection observer 등을 활용해 해당 태그가 보이면 목차의 백그라운드 색깔도 바꾸기.\n    useEffect(() => {\n      if (typeof ref !== 'function') {\n        // console.log(ref?.current?.querySelectorAll('h1, h2, h3'));\n      }\n    }, []);\n\n    return (\n      <Container>\n        <TableOfContentsRenderer\n          dangerouslySetInnerHTML={{ __html: tableOfContents }}\n        />\n      </Container>\n    );\n  },\n);\n\nexport default TableOfContents;\n\nconst Container = styled.aside`\n  position: absolute;\n  top: 0;\n  left: 768px;\n  height: 100%;\n  padding-left: 4rem;\n\n  @media (max-width: 1400px) {\n    display: none;\n  }\n`;\n\nconst TableOfContentsRenderer = styled.nav`\n  position: sticky;\n  top: 6rem;\n  width: 240px;\n  overflow: hidden;\n  font-size: 0.8rem;\n\n  p {\n    margin: 0;\n  }\n\n  a {\n    display: block;\n    padding: 0.5rem;\n    overflow: hidden;\n    white-space: nowrap;\n    text-overflow: ellipsis;\n    border-radius: 4px;\n    transition: all 0.1s ease-out;\n\n    &:hover {\n      background-color: ${COLORS.SUB_MIDDLE_BOLD};\n    }\n  }\n\n  ul {\n    margin-left: 0.5rem;\n    padding: 0 0.5rem;\n    list-style: none;\n\n    border-left: 2px solid ${COLORS.GRAY};\n  }\n`;\n","import styled from '@emotion/styled';\nimport Layout from 'components/common/Layout';\nimport PostComment from 'components/PostDetail/PostComment';\nimport PostContent from 'components/PostDetail/PostContent';\nimport PostHead from 'components/PostDetail/PostHead';\nimport TableOfContents from 'components/PostDetail/TableOfContents';\nimport { graphql } from 'gatsby';\nimport { useRef } from 'react';\nimport { PostDetail } from 'types/Post';\n\ntype Props = {\n  data: {\n    allMarkdownRemark: {\n      edges: PostDetail[];\n    };\n  };\n  location: {\n    href: string;\n  };\n};\n\nconst PostTemplate = ({\n  data: {\n    allMarkdownRemark: { edges },\n  },\n  location: { href },\n}: Props) => {\n  const contentRef = useRef<HTMLDivElement>(null);\n  const {\n    node: {\n      tableOfContents,\n      timeToRead,\n      html,\n      frontmatter: {\n        title,\n        summary,\n        date,\n        categories,\n        thumbnail: {\n          childImageSharp: { gatsbyImageData },\n          publicURL,\n        },\n      },\n    },\n  } = edges[0];\n\n  return (\n    <Layout title={title} description={summary} url={href} image={publicURL}>\n      <Container>\n        <PostHead\n          title={title}\n          date={date}\n          categories={categories}\n          thumbnail={gatsbyImageData}\n          timeToRead={timeToRead}\n        />\n        <PostContent ref={contentRef} html={html} />\n        <PostComment />\n        <TableOfContents ref={contentRef} tableOfContents={tableOfContents} />\n      </Container>\n    </Layout>\n  );\n};\n\nexport default PostTemplate;\n\nexport const getMarkdownDataBySlug = graphql`\n  query getMarkdownDataBySlug($slug: String) {\n    allMarkdownRemark(filter: { fields: { slug: { eq: $slug } } }) {\n      edges {\n        node {\n          tableOfContents\n          timeToRead\n          html\n          frontmatter {\n            title\n            summary\n            date(formatString: \"YYYY-MM-DD\")\n            categories\n            thumbnail {\n              childImageSharp {\n                gatsbyImageData\n              }\n              publicURL\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\nconst Container = styled.div`\n  position: relative;\n  width: 100%;\n  max-width: 768px;\n  margin: 0 auto;\n`;\n"],"names":["commentRef","useRef","useEffect","current","utterances","document","createElement","attributes","src","repo","label","theme","crossorigin","async","Object","entries","forEach","_ref","key","value","setAttribute","appendChild","_jsx","ref","forwardRef","html","MarkdownRenderer","dangerouslySetInnerHTML","__html","COLORS","title","date","categories","thumbnail","timeToRead","_jsxs","Container","Thumbnail","image","alt","Title","CategoriesCreatedAtContainer","CategoriesAndTimeToReadContainer","map","category","CategoryListItem","TimeToRead","CreatedAt","_styled","GatsbyImage","tableOfContents","TableOfContentsRenderer","data","allMarkdownRemark","edges","location","href","contentRef","node","frontmatter","summary","childImageSharp","gatsbyImageData","publicURL","Layout","description","url","children","PostHead","PostContent","PostComment","TableOfContents","target","name","styles"],"sourceRoot":""}